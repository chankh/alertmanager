// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1b\x6b\x73\xe2\x46\xf2\xbb\x7e\x45\x47\xa9\xab\xac\xab\x10\xb2\xbd\xc9\x56\xfc\xc0\x57\x2c\x96\xd7\xd4\x61\x70\x01\xde\xcd\x56\x2a\x95\x1a\xa4\x01\x66\x57\xaf\x68\x46\xc6\x4e\x2e\xff\xfd\xba\x47\xe2\x21\x10\x36\xf6\x39\x36\x77\xf1\x6e\x1e\x4c\x6b\xfa\xdd\xd3\xdd\xa3\x19\xfd\xf1\x07\x78\x7c\x28\x42\x0e\xe6\xaf\xbf\x32\x9f\x27\x2a\x60\x21\x1b\xf1\xc4\x84\x3f\xff\xac\xd3\xf8\x22\x1b\xe3\x44\x1e\x7a\x08\x34\xd6\xa2\x5c\x75\x5b\x84\x85\xcf\xab\xce\x8d\xe2\x49\xc8\x7c\x04\x21\xc4\xfe\xd6\xd6\xf3\xe4\x3f\x13\xee\x72\x71\xcd\x93\x1a\x4d\xea\xe6\x83\x0c\x27\xa7\x5e\x24\x2f\xd3\xc1\x17\xee\x2a\x22\xfb\x33\xa1\xf4\x14\x53\xa9\x84\x7f\x83\x8a\xae\xe2\x78\x8a\x2a\x86\xc0\x7f\x9b\x3d\x34\x87\x22\x11\xe1\x88\x70\x0e\x09\x47\x6b\x21\xab\x67\x1a\x8a\xa8\x3e\x0f\x17\x39\xfe\x02\x34\xe9\x43\x12\xa5\x71\x8b\x0d\xb8\x2f\xab\xbd\x28\x51\xdc\xbb\x64\x22\x91\xd5\x8f\xcc\x4f\x39\x31\xfc\x12\x89\x10\x4c\x20\xaa\x90\xb1\x1c\x29\x78\x43\xb4\xaa\x8d\x28\x08\xa2\x30\x43\xde\xc9\x61\x0b\xf4\x76\x10\xe5\x0d\xa2\x4c\x84\x1a\x17\x27\xa3\x05\x82\xe8\x9a\x17\xb9\xb7\x59\x80\x0c\x33\x33\x96\x71\x9f\x09\xbe\x33\xfb\xb5\xc6\x37\x1e\x97\x6e\x22\x62\x25\xa2\xd0\xbc\xc3\xc6\x8a\xdf\xa8\xcc\x8f\xbf\xfa\x42\xaa\x7c\x6a\xc2\xc2\x11\x4a\x86\x83\x4c\xae\x43\x63\x0e\x5c\xb5\x13\x59\xc5\xd2\x86\x24\xf1\x69\x54\x83\x99\x02\xb9\x60\x19\xf3\x7a\x18\x46\xe8\x27\x94\xa9\x40\x72\x01\xfc\x38\xba\xbd\x28\x4d\x5c\x7e\x98\x39\x93\x87\x3c\x61\x2a\x4a\xb2\xf0\x33\x4a\x0c\x55\xb0\x81\xf4\x99\xfb\xb5\x8a\x23\x96\xfa\xaa\xaa\x84\xf2\x79\x6e\x05\xc5\x83\xd8\x67\xaa\x18\x8b\xd5\x75\x26\x2f\xd2\x49\x25\x2d\x81\xa0\x8c\x54\x71\xa1\x6d\x48\x6f\xc8\x7c\x7f\x80\x80\x15\x7a\xa5\xe2\x13\x51\x0c\x9c\xfb\x26\xfa\x22\xfc\xba\xb1\x04\x71\xc2\x29\x58\xcc\xcd\x66\x2f\xd0\xbf\xd3\x00\x3a\x6d\x6c\x28\x81\x70\xa3\x10\xd7\xcc\x17\xb1\xa1\x0c\x34\x3f\x4d\xfc\x4d\x25\x5e\x51\xae\x10\x26\x63\x11\xbb\x63\xa6\xe6\x0e\x49\xa2\xe0\xf1\xce\x5d\xa6\x86\xab\x5e\x22\xca\xe6\x81\x57\x90\x2d\x26\x6e\x5e\xaa\x6e\x67\xf4\x56\x57\xff\xc3\x82\x79\x95\xa2\xeb\x0b\x1e\xaa\xc7\x6b\xbc\x8e\xe2\xbc\x6e\x3c\x2e\x44\x56\xe9\x8a\x50\x2a\x16\xba\x5c\x96\xd0\x5d\x49\x77\x77\x58\x35\x8a\xe5\x88\x87\x82\x3f\xde\x49\x77\x11\x5b\xf5\x50\x5e\x1d\xd6\x24\xc3\xd2\x72\x60\x2c\x15\xa3\x42\xb5\xdb\x81\x5d\xb0\x70\x4e\x06\x84\x0c\xa8\xd3\xee\xdd\x16\x29\x96\x4c\xcd\xc4\x5a\xd0\xa8\x84\x5f\x97\xcb\xc8\xbf\xe6\xde\x12\xc7\x29\x78\x73\x9e\x53\x8c\x15\xae\xd6\x26\x26\x95\xba\x0a\x3c\x3c\x9a\x0a\x5e\xbf\x16\x2e\xd6\x0e\xa4\xfd\x50\xb7\x2f\xe7\xdb\x87\x04\xf1\x2a\xd3\x47\xa4\x97\x82\x1a\x01\x63\x42\x3c\x49\xe4\x16\x29\xbd\x86\xed\x7f\x1b\xb6\x45\x7b\x3e\x49\xcc\xf2\x80\x09\x7f\x4e\x72\xde\x36\x3f\xd8\xd9\x45\x4a\x63\x15\xe8\xea\x69\x1c\x7f\x73\xda\x69\xf4\x3f\x5f\x3a\x40\x20\xb8\xbc\x7a\xdf\x6a\x36\xc0\xb4\x6c\xfb\xd3\xdb\x86\x6d\x9f\xf6\x4f\xe1\xa7\xf3\xfe\x45\x0b\xf6\xaa\xbb\xd0\xc7\xae\x4e\x0a\x8a\x04\xe6\xdb\xb6\xd3\x46\x9f\x8f\x95\x8a\x0f\x6d\x7b\x32\x99\x54\x27\x6f\xab\x51\x32\xb2\xfb\x5d\xfb\x86\x68\xed\x11\x72\xfe\xd3\x52\x0b\x98\x55\x4f\x79\xe6\x09\x72\xb6\x2c\xa3\xa7\x6e\x7d\x0e\x0c\xa5\xd5\x4c\x3c\x9e\x08\xb2\x36\xad\x11\x20\xd2\x12\x69\x8f\xb0\xc1\x4e\x07\x55\x37\x0a\x6c\xd2\x61\x94\x86\xb6\x26\xc7\xdc\x8c\x9e\xa5\x55\xb3\xa6\xe6\x90\x68\xc1\xfe\x98\xc3\x45\xb3\x0f\x2d\xe1\xf2\x50\x72\x78\x83\x83\x1d\xc3\x68\x44\xf1\x6d\x22\x46\x63\x8c\x16\x77\x07\xf6\x77\xf7\xbe\x87\x8b\x8c\xa2\x61\x5c\xf2\x24\x10\x52\x22\x45\x10\x12\xc6\x3c\xe1\x83\x5b\x18\x21\x1f\x8c\xf7\x0a\x0a\xc4\x39\x44\x43\xc0\xd2\x9e\x8c\x78\x05\xf7\x29\x28\xf4\x2d\xe0\x56\x45\x22\x42\x34\x50\x4c\x84\x14\x9c\x0c\x5c\xe4\x61\xe0\x4c\x35\x46\x32\x32\x1a\xaa\x09\x4b\x32\x0d\x99\x94\x91\x2b\x50\x42\x0f\xbc\xc8\x4d\x03\x2c\x91\x7a\x55\xc1\x50\xf8\xb8\x8e\xde\x28\x14\xda\xec\xe5\x18\xe6\x8e\x66\xe2\x71\xe6\x1b\xb8\xba\xe8\xd9\xf4\x91\xde\x71\x44\xa9\x82\x84\x4b\x95\x08\x6d\x85\x0a\x88\xd0\xf5\x53\x8f\x64\x98\x3e\xf6\x45\x20\x72\x0e\x84\xae\x15\x97\x06\x12\xc5\x0e\xb6\xa2\xe5\xac\x40\x10\x79\x62\x48\xff\xe7\x5a\xad\x38\x1d\x60\xfc\x8f\x2b\xe0\x09\x22\x3d\x48\x15\x02\x25\x01\xb5\x1d\x2b\xa4\x87\x1d\x25\x20\xb9\xef\x1b\x48\x41\xa0\xdc\x5a\xd7\xb9\x74\x7a\x0e\x89\x1e\x93\x41\x55\x6e\x22\x49\x90\xc9\x18\xbd\x5a\xd0\x44\x48\x63\x98\x26\x21\xb2\xe4\x1a\xc7\x8b\xd0\x64\x9a\x23\x45\x33\x41\x68\xfa\x30\xf2\xfd\x68\x42\xaa\x61\xdb\xe7\x89\x7c\x93\xa1\x9d\xcc\x06\xb4\xd1\x72\x67\x7e\xc5\x4c\x85\xa2\x66\x22\x90\x03\xe2\xb9\x57\xf3\x47\x72\x8c\xfd\x36\x0c\x78\x6e\x30\xe4\x8b\xe6\x65\x0b\xea\x24\xc4\x9e\xfa\x0c\x25\x98\x0f\x31\x26\x3c\xe2\xb7\xac\x66\x15\xf9\x9f\x3b\xd0\xeb\x9c\xf5\x3f\xd5\xbb\x0e\x34\x7b\x70\xd9\xed\x7c\x6c\x9e\x3a\xa7\x60\xd6\x7b\x38\x36\x2b\xf0\xa9\xd9\x3f\xef\x5c\xf5\x01\x67\x74\xeb\xed\xfe\x67\xe8\x9c\x41\xbd\xfd\x19\xfe\xd5\x6c\x9f\x56\xc0\xf9\xe9\xb2\xeb\xf4\x7a\xd0\xe9\x1a\xcd\x8b\xcb\x56\xd3\x41\x58\xb3\xdd\x68\x5d\x9d\x36\xdb\x1f\xe0\x3d\xe2\xb5\x3b\x18\xc2\x4d\x8c\x5d\x24\xda\xef\x00\x31\xcc\x49\x35\x9d\x1e\x11\xbb\x70\xba\x8d\x73\x1c\xd6\xdf\x37\x5b\xcd\xfe\xe7\x8a\x71\xd6\xec\xb7\x89\xe6\x59\xa7\x0b\x75\xb8\xac\x77\xfb\xcd\xc6\x55\xab\xde\xc5\x85\xdd\xbd\xec\xf4\x1c\x64\x7f\x8a\x64\xdb\xcd\xf6\x59\x17\xb9\x38\x17\x4e\xbb\x5f\x45\xae\x08\x03\xe7\x23\x0e\xa0\x77\x5e\x6f\xb5\x88\x95\x51\xbf\x42\xe9\xbb\x24\x1f\x34\x3a\x97\x9f\xbb\xcd\x0f\xe7\x7d\x38\xef\xb4\x4e\x1d\x04\xbe\x77\x50\xb2\xfa\xfb\x96\x93\xb1\x42\xa5\x1a\xad\x7a\xf3\xa2\x02\xa7\xf5\x8b\xfa\x07\x47\x63\x75\x90\x4a\xd7\xa0\x69\x99\x74\xf0\xe9\xdc\x21\x10\xf1\xab\xe3\x3f\x8d\x7e\xb3\xd3\x26\x35\x1a\x9d\x76\xbf\x8b\xc3\x0a\x6a\xd9\xed\xcf\x50\x3f\x35\x7b\x4e\x05\xea\xdd\x66\x8f\x0c\x72\xd6\xed\x5c\x54\x0c\x32\x27\x62\x74\x34\x11\xc4\x6b\x3b\x19\x15\x32\x35\x14\x3c\x82\x53\x68\x7c\xd5\x73\x66\x04\xe1\xd4\xa9\xb7\x90\x56\x8f\x90\x49\xc5\xe9\xe4\xaa\x61\x59\x98\x91\x74\x0a\xbc\x09\xfc\x50\xd6\x4a\x12\xdb\xde\xc1\xc1\x41\x96\xcf\xcc\xcd\x26\x49\x4a\x6e\x35\x73\x18\x85\xca\x1a\xb2\x40\xf8\xb7\x87\xf0\xdd\x39\xc7\x7a\x82\x91\xc8\xa0\xcd\x53\xfe\x5d\x05\x66\x00\x54\x35\xc1\x90\xc3\xf0\xc7\xe4\x66\xe1\x2e\x53\x0c\x8f\x60\x10\xdd\x58\x52\xfc\x4e\x85\x12\x7f\x27\x98\x20\x2d\x04\x1d\x81\x26\x8a\x0f\x70\x6b\xbc\xf7\x7d\x8c\x80\x00\x13\x93\x08\x0f\x61\xf7\x88\x72\xeb\x98\x33\xef\x25\xf9\x07\x5c\x31\xa0\x5d\x72\x0d\x3b\x20\x3e\xa1\x55\x64\xd2\xea\x55\x98\xf4\x6a\xe6\x44\x78\x6a\x5c\xf3\x38\x36\x47\xdc\xd2\x83\x97\x33\x16\xd8\x53\x71\xc9\x99\x16\xff\x2d\x15\xd7\x35\xb3\x91\x89\x6a\xf5\x6f\x63\xbe\x20\x38\xf5\x09\x36\x39\xf7\x48\x57\x02\xc9\x55\xed\xaa\x7f\x66\xfd\xf8\xc2\xe2\xeb\x2d\xf9\xcb\xb9\xfb\xae\x5e\xe4\xd8\xd6\xc2\x9d\x18\xc6\xb1\x4d\x41\x49\x3f\x06\x91\x77\x0b\x02\x51\x24\xe6\x5c\x94\xd8\xd4\x03\x75\x4b\xbf\xf3\x15\x25\xdd\x31\x56\x75\xbd\xa2\x1c\xaa\xee\x17\xd3\x36\xf7\x59\x95\xb4\x26\x7c\xf0\x55\x20\x23\xfd\x20\x88\x22\xac\x29\x84\x94\xd5\x06\xc1\x24\xf7\xe6\x93\x28\x36\x34\xb6\xc5\xbc\x2f\xa9\x54\x87\x58\x71\x42\x7e\x84\xad\x04\x55\x26\x24\xb9\xbb\xfb\x8f\x23\x2c\xca\x21\xb7\x66\xa0\xea\x3b\x1e\x1c\x81\x5e\x01\xd9\x04\xf8\x46\x04\xb4\x58\x90\x03\xca\xc9\xdc\xaf\xa3\x24\x4a\x43\xcf\x72\x23\x3f\x4a\x0e\xe1\xdb\xe1\x3b\xfa\xbb\x68\x7e\x88\x99\xe7\x69\xa9\x28\x1a\x06\x23\x3d\xb3\x66\xe6\x33\x4d\xb2\xb7\x62\x83\xe7\x0e\x8f\x05\x95\x36\xd4\xa3\x54\x76\x80\x63\x95\xbc\x60\x1e\x03\x20\x09\x9e\x39\x93\x5e\xe3\xf6\x00\x89\xf8\x16\x86\xd8\x08\x25\x51\x51\x5c\x34\xd4\xb5\x7e\x80\xd9\x28\x8a\xcd\x13\x5c\x60\xde\x5c\xd0\x2c\xb3\x9a\xef\x76\x77\x9f\x79\xa9\x94\x0a\x8d\x5d\x24\x66\x05\x64\x3b\xf0\x23\xf7\x6b\x21\xb6\x03\x76\x63\xe5\x41\x82\xc2\xc6\x37\x85\x87\xae\xcf\x59\x42\x0c\xd5\xb8\x00\x5f\xb7\x50\x66\xc6\x01\x96\xaa\x68\x69\x49\x14\xac\xa5\x0d\x85\xa6\xf2\xc4\xf5\x73\x87\x55\x51\xdf\x65\xe3\xdc\xad\xc4\x54\x6e\x72\xb2\x5e\xcc\xb9\x9f\xc9\x12\x58\x9e\xb0\x1b\xcf\x67\xd7\xcc\xdd\x6c\x2c\x63\xe6\x4e\xc7\xcf\xaa\x68\xfe\x30\x61\x9e\x48\xe5\x21\xbc\xd5\xb0\x92\x04\x30\x1c\x16\xb2\x58\x86\x86\x44\x30\x14\x70\xcb\x2d\x3c\xf8\x96\x1f\xd0\xdf\x62\x62\x18\x0e\x17\x6c\xb1\x0d\xd9\x61\x2e\xc9\xf3\x65\x89\x77\x6b\x17\x5c\xc1\xba\x1a\x65\x92\x97\x9a\x1f\x76\xd1\xc8\xba\x44\xe5\xf3\x71\x43\xa7\x78\x52\xe6\x2f\xfd\xef\xae\x76\xca\xaa\xdf\x9c\x77\x3f\xec\xef\x37\xca\x0b\xd0\x3e\xc5\xb5\x09\xf9\x7a\xcb\x18\x2c\x7a\x2f\xc3\x2d\x5f\x91\xd3\x3f\xf3\x93\xbd\xd9\x91\x1e\xe8\x17\x26\xa5\x2f\x7a\x76\x60\x0f\x27\xc8\xd9\x0b\x0f\xd4\x39\x81\xf9\xe9\xd3\x9a\xd3\x3f\x7a\xef\x01\xb0\xca\x37\x3f\x8b\xaa\x15\x4e\xa2\x56\xa6\xe5\xaf\x56\x0a\xce\x9f\xe5\xe0\xd9\x38\x79\x0d\xd3\x4d\x8a\xd9\x3c\x78\xf6\xb2\xe0\xb9\x2b\x36\xb6\x3e\xf7\xad\x35\xfb\x76\x05\xc1\xb6\x87\x02\xe6\x9e\x69\x2e\xb9\x2b\x1c\x72\x35\x70\xe3\x96\xf0\x61\xcd\xdc\xe4\x2d\xeb\x33\xc7\xc3\x34\x69\x9e\x9d\x9d\xe5\xc9\xd7\xe3\x6e\x94\xe8\x77\x72\xd3\xed\x41\x61\x43\xb0\x4f\xdb\x81\x42\xde\x1e\x44\xbe\x57\x9e\xb8\xdd\x34\x91\x44\x3d\x8e\x44\x06\x98\x35\x14\x22\xd4\x44\xf3\xbe\x62\x29\xc1\xff\x40\x82\x69\x7a\xfa\x25\x2a\x26\xcc\x00\x69\xb2\x58\x28\xa4\xff\x3b\x2f\x4d\xfa\x6f\xbf\xff\x91\x7b\xac\xa4\x5e\xaf\xcc\xc8\xc1\xda\xca\x87\x59\x21\x9f\x01\x67\xdd\x1b\x96\x97\xcc\xbd\x27\x1f\x05\x9f\xd0\xfb\xb7\x7b\xcf\x42\x8e\x6d\x56\x1a\xc3\x4b\x89\xb7\x3c\xfd\x66\x7f\xee\x3b\x99\x28\x29\x0a\xaf\x4b\xf6\xaf\x59\xb2\x52\x25\x51\x38\x7a\x39\xd3\xfe\xbc\xfe\xfe\xd0\x2f\xf9\xb1\xd4\xb1\x9d\x09\xf9\x04\x51\x57\xd2\x30\xe4\x4f\xa6\x97\x64\x96\xcf\xb7\x5e\xe3\xf0\xef\x11\x87\x59\x6b\x3a\x0b\xb5\xe3\xc1\xcb\xb9\x99\xde\x23\x96\xd9\xe8\x9e\xdb\x61\xeb\xaf\x70\xbd\xb0\x32\xeb\xd7\x5d\xae\x55\xa1\x16\xcc\x4f\xb8\xb3\x4a\xf0\xe2\x91\xb1\x20\xd1\xb6\x84\xc7\xbd\x16\xbd\xf7\xca\xdf\xff\x68\xb0\x2c\x76\x98\xcb\x77\x10\x5f\xa8\xa1\x9c\xb6\x5b\x2b\x3d\x25\x76\x6d\x3c\xa1\xee\xaf\x18\x4e\xd9\x2d\x4a\x6a\xa2\xb6\x2f\xc7\x3c\xae\x9a\x6e\xd8\xde\x2d\x5e\x04\x29\x75\xef\x6b\x57\xb8\x35\xd5\x78\xeb\x22\x13\x65\x1a\x6f\xa1\x4c\x5b\x67\xa7\x87\xac\xe0\xbb\x3a\xe2\xd7\x85\xf5\xff\xd9\xe6\x2e\x6e\xb7\x66\x17\xea\xe6\x1b\xae\x29\xe8\x05\xb6\x5c\x8b\xd7\xfb\x5e\xa3\xf1\xef\x11\x8d\xaf\x9b\xae\xd7\x4d\xd7\xeb\xa6\x6b\xdb\x83\xe5\x75\xd3\xb5\x35\x2d\xdb\x3a\x47\xe1\x6c\x3a\x8f\x3b\x79\xc0\x51\xe8\x0c\x65\x0e\x79\xf6\x9b\x18\x85\xab\x49\x0b\x37\x4d\xe6\x8e\x3e\x38\x38\xb8\xeb\x80\xbb\x78\xb2\xbb\x7a\x24\xb9\x1d\x4d\xc3\x36\xb5\x2f\xcf\xd9\xba\xec\xaf\x6d\x5d\x4a\x0f\xd1\xee\x73\xf9\x42\x6f\xb3\x74\xaf\xa1\x78\x0b\x6b\x31\x5d\x15\xbf\x92\x7e\xbe\x80\xd8\x5f\xcc\x56\x5a\xa3\x8d\x53\x15\xea\x04\x83\xdb\xcd\xce\xe1\x56\x73\xc7\xca\x7d\x87\xe5\xcc\x70\x6c\xe3\x32\x3f\xc9\xfe\x6b\x14\xd3\xc4\xb6\xb5\xb5\x6b\xae\xd7\x65\x2a\xce\xf3\xd7\xb1\x4d\xb7\x58\x09\x42\xd7\x81\x4f\x0c\xe3\x8f\xd2\xcf\xb0\xe3\x54\x8e\x23\xe4\xf8\x04\x5f\x21\xaf\x90\x2a\x7e\xfa\xf5\x57\x7c\xac\xf5\x34\xdf\x6a\x6d\xfe\xa9\xd6\xd3\x7d\xa9\xb5\xc0\x73\x03\x4b\xce\x3f\x25\x7e\xc0\x77\x5a\xff\x09\x00\x00\xff\xff\xeb\x40\xef\x13\x63\x41\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16739, mode: os.FileMode(436), modTime: time.Unix(1473497130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
