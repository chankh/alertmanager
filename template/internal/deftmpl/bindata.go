// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x6b\x6f\xe2\xc6\xda\xdf\xfd\x2b\x9e\xba\x7a\xd5\x8d\x04\x98\x64\xdb\x55\x43\x20\xaf\x58\xe2\x6c\xac\x43\x20\x32\xce\x6e\x57\x55\x15\x0d\xf6\x00\xb3\x6b\xcf\xb8\x33\x63\x08\x4d\xf9\xef\x47\x33\x36\x17\x07\x93\x90\x9c\x6d\xc2\x39\x4b\xa2\x76\xf1\x78\x9e\xfb\x75\x2e\xe4\xee\x0e\x02\x3c\x20\x14\x83\x79\x73\x83\x42\xcc\x65\x84\x28\x1a\x62\x6e\xc2\x6c\xd6\x54\xcf\x97\xe9\xf3\xdd\x1d\x60\x1a\xc0\x6c\x66\x6c\x04\xb9\x76\xdb\x0a\xea\xee\x0e\x2a\xf6\xad\xc4\x9c\xa2\xf0\xda\x6d\xc3\x6c\x66\xfd\x68\xe9\x79\xe2\xff\x39\xf6\x31\x19\x63\xde\x50\x93\xdc\xec\x21\x85\xc9\xb0\xe7\xd1\x8b\xa4\xff\x05\xfb\x52\xa1\xfd\x5d\x81\xf4\x24\x92\x89\x80\xbf\x41\xb2\xeb\x38\x9e\x83\x92\x01\xe0\x3f\x17\x2f\xcd\x01\xe1\x84\x0e\x15\x4c\x4d\xc1\x68\x29\x44\xe5\x5c\x8f\xc2\xdf\x10\x62\xba\x4a\xf1\x0f\x50\x93\x3e\x70\x96\xc4\x6d\xd4\xc7\xa1\xa8\xf4\x18\x97\x38\xb8\x42\x84\x8b\xca\x47\x14\x26\x58\x11\xfc\xc2\x08\x05\x13\x14\x56\x48\x49\x0e\x25\xbc\x51\xb8\x2a\x2d\x16\x45\x8c\xa6\xc0\x07\xd9\xd8\x0a\xbe\x03\x98\xcd\xde\xdc\xdd\xc1\x84\xc8\x51\x7e\x72\xc5\xc5\x11\x1b\xe3\x3c\xf5\x0e\x8a\xb0\xc8\xd4\x58\x44\x7d\xc1\xf8\xc1\xe2\xd3\x06\xdb\x04\x58\xf8\x9c\xc4\x92\x30\x6a\x3e\xa0\x63\x89\x6f\x65\x6a\xc7\x9b\x90\x08\x99\x4d\xe5\x88\x0e\x31\x54\x60\x36\x4b\xf9\xaa\x19\xcb\xc1\x75\x3d\x29\xad\x94\xb5\x22\x15\xfb\xea\xa9\x01\x0b\x01\x32\xc6\x52\xe2\x4d\x4a\x99\x44\x8a\xa7\x1c\xca\x95\xe1\xe7\xe1\xed\xb1\x84\xfb\xb8\x96\x1a\x13\x53\xcc\x91\x64\x3c\x75\x3f\xa3\x40\x51\x39\x1d\x88\x10\xf9\x5f\x2b\x01\x1e\xa0\x24\x94\x15\x49\x64\x88\x33\x2d\x48\x1c\xc5\x21\x92\x79\x5f\xac\x6c\x52\x79\x1e\x4f\x22\x54\x08\x44\x45\xa8\xf2\x81\xb6\x25\xbe\x01\x0a\xc3\x3e\xf2\xbf\xae\xe1\x2b\x64\x5f\x21\x85\xbf\xe1\xb1\x89\x21\xa1\x5f\xb7\xe6\x20\xe6\x58\x39\x8b\xb9\xdd\xec\x15\xfc\x0f\x2a\x40\xa7\x8d\x2d\x39\x20\x3e\xa3\x38\x62\x5f\xc8\x96\x3c\xa8\xf9\x09\x0f\xb7\xe5\x78\x7b\xe1\x06\x8c\xc9\x34\x49\x6e\xf0\xa9\x11\x89\xfd\x11\x92\x4b\x00\xce\xa2\xe7\x7b\xc2\x7d\x6c\x11\x16\x02\x0d\x9f\xe0\xa5\x39\xde\x62\x45\x2d\x48\xe4\x74\x81\x6f\x3d\x55\x3c\xcd\xf3\xd7\x31\xfa\x21\xc1\x54\x3e\x5f\xe2\x4d\x18\x97\x45\xe6\x79\xfe\xb4\x8e\x97\x50\x21\x11\xf5\xb1\x28\xc0\xbb\x96\x1b\x1f\xd0\x2a\x8b\xc5\x10\x53\x82\x9f\x6f\xa4\x87\x90\xad\x5b\x28\x2b\x25\x1b\x32\x67\x61\xed\x30\xee\x55\xae\x5c\x69\x3c\x80\x2a\x94\x67\x33\x23\x1d\x84\x74\x50\xe7\xe8\x87\x35\x92\xaf\xaf\x9a\x48\x79\x45\xa2\x02\x7a\x2e\x16\x2c\x1c\xe3\xe0\x1e\xc5\xf9\xf0\xf6\x34\xe7\x10\x6b\x54\xcb\xdb\xa8\x54\xe8\x92\xf1\x74\x6f\xca\x59\x7d\x82\x9f\x13\x98\xc6\xde\x7e\x0f\xd8\xaf\xb9\xaa\x7f\x1e\xae\xe1\x2b\xb4\xcf\x2a\x82\xbc\x89\xc6\xc4\x97\x8c\xb3\x58\x2c\x2d\x2f\x91\xc4\x37\x79\x5b\xed\xcd\xf1\xb4\x70\x5a\xd7\x2a\xa6\x92\xc8\xe9\x4d\x40\x44\x1c\xa2\xe9\xcd\x86\xde\xe7\xf1\xdc\xb7\x8e\x39\x62\x94\x48\xa6\x14\x72\x23\x19\x0b\x9f\x58\x55\x56\x71\x47\x08\x11\xf2\x4d\x32\x74\x1e\xd3\x3e\x3d\xff\xa7\xfe\x94\xd7\xe7\x37\xc9\xcd\x7b\x63\x7f\x47\xc6\xc6\x11\x22\xe1\x12\xe5\x72\xe3\xe0\xc9\xc6\xce\x63\x1a\xc9\x48\x27\x1c\xa3\xfe\xc3\x59\xb7\xe5\x7d\xbe\xb2\x41\x0d\xc1\xd5\xf5\xfb\xb6\xd3\x02\xb3\x6c\x59\x9f\xde\xb6\x2c\xeb\xcc\x3b\x83\xdf\x2e\xbc\xcb\x36\x1c\x56\xaa\xe0\x71\x44\x05\x51\x9e\x80\x42\xcb\xb2\x3b\x26\x98\x23\x29\xe3\x9a\x65\x4d\x26\x93\xca\xe4\x6d\x85\xf1\xa1\xe5\xb9\xd6\xad\xc2\x75\xa8\x80\xb3\x8f\x65\xb9\x02\x59\x09\x64\x60\x9e\x1a\xf5\x1f\xca\x65\xa3\x27\xa7\x21\x06\x44\x03\xd0\x44\x02\xcc\x89\xd2\xb6\x5a\x57\x80\x42\x2d\x6a\x96\x35\x24\x72\x94\xf4\x2b\x3e\x8b\x2c\x25\xc3\x30\xa1\x96\x46\x87\xfc\x14\x5f\x59\x8b\x56\x9e\xab\x43\x18\x86\xe1\x8d\x30\x5c\x3a\x1e\xb4\x89\x8f\xa9\xc0\xf0\xe6\xd2\xf1\x0e\x0c\xa3\xc5\xe2\x29\x27\xc3\x91\x84\x37\xfe\x01\x1c\x55\x0f\x7f\x86\xcb\x14\xa3\x61\x5c\x61\x1e\x11\x21\x08\xa3\x40\x04\x8c\x30\xc7\xfd\x29\x0c\x39\xa2\x12\x07\x25\x18\x70\x8c\x81\x0d\xc0\x1f\x21\x3e\xc4\x25\x90\x0c\x10\x9d\x42\x8c\xb9\x60\x14\x58\x5f\x22\x42\x95\x73\x22\xf0\x59\x3c\x35\xd8\x00\xe4\x88\x08\x10\x6c\x20\x27\x88\xa7\x12\x22\x21\x98\x4f\x90\xc4\x01\x04\xcc\x4f\x22\x4c\xd3\xa8\x82\x01\x09\xb1\x80\x37\x72\x84\xc1\xec\x65\x10\xe6\x81\x26\x12\x60\x14\x1a\x84\x82\x7a\x37\x7f\xa5\xf7\x5c\x58\x22\x81\x63\x21\x39\xd1\x5a\x28\x01\xa1\x7e\x98\x04\x8a\x87\xf9\xeb\x90\x44\x24\xa3\xa0\xc0\xb5\xe0\xc2\x90\x0c\x12\x81\x4b\x9a\xcf\x12\x44\x2c\x20\x03\xf5\x2f\xd6\x62\xc5\x49\x3f\x24\x62\x54\x82\x80\x28\xd4\xfd\x44\xe2\x12\x08\x35\xa8\xf5\x58\x52\x72\x58\x8c\x83\xc0\x61\x68\xf8\x2c\x26\x58\x80\x96\x75\xc9\x9d\x9e\xa3\x58\x8f\x95\x42\x65\xa6\x22\xa1\x46\x26\x23\x16\xe5\x25\x21\xc2\x18\x24\x9c\x12\x31\xc2\x1a\x26\x60\x20\x98\xa6\xa8\xbc\x59\x8d\xa8\xe9\x03\x16\x86\x6c\xa2\x44\xf3\x19\x0d\x48\xb6\xcd\xa2\x8d\x8c\xfa\x6c\x8c\xb5\x2c\xa9\x5d\x29\x93\xc4\x4f\xd5\xad\x0d\x10\x2f\xad\x9a\xbd\x12\x23\x14\x86\xd0\xc7\x99\xc2\x70\x00\x84\x02\x5a\x11\x87\x2b\xf2\x6a\xf1\x24\x09\x0a\x21\x66\x5c\xd3\xbb\x2f\x66\xc5\x30\xbc\x0b\x1b\x7a\xdd\x73\xef\x53\xd3\xb5\xc1\xe9\xc1\x95\xdb\xfd\xe8\x9c\xd9\x67\x60\x36\x7b\xe0\xf4\xcc\x12\x7c\x72\xbc\x8b\xee\xb5\x07\x9f\x9a\xae\xdb\xec\x78\x9f\xa1\x7b\x0e\xcd\xce\x67\xf8\x97\xd3\x39\x2b\x81\xfd\xdb\x95\x6b\xf7\x7a\xd0\x75\x0d\xe7\xf2\xaa\xed\xd8\x67\x25\x70\x3a\xad\xf6\xf5\x99\xd3\xf9\x00\xef\xaf\x3d\xe8\x74\x3d\x68\x3b\x97\x8e\x67\x9f\x81\xd7\x05\x45\x30\x43\xe5\xd8\x3d\x85\xec\xd2\x76\x5b\x17\xcd\x8e\xd7\x7c\xef\xb4\x1d\xef\x73\xc9\x38\x77\xbc\x8e\xc2\x79\xde\x75\xa1\x09\x57\x4d\xd7\x73\x5a\xd7\xed\xa6\x0b\x57\xd7\xee\x55\xb7\x67\x43\xb3\x73\x06\x9d\x6e\xc7\xe9\x9c\xbb\x4e\xe7\x83\x7d\x69\x77\xbc\x0a\x38\x1d\xe8\x74\xc1\xfe\x68\x77\x3c\xe8\x5d\x34\xdb\x6d\x45\xca\x68\x5e\x7b\x17\x5d\x57\xf1\x07\xad\xee\xd5\x67\xd7\xf9\x70\xe1\xc1\x45\xb7\x7d\x66\xbb\x3d\x78\x6f\x43\xdb\x69\xbe\x6f\xdb\x29\xa9\xce\x67\x68\xb5\x9b\xce\x65\x09\xce\x9a\x97\xcd\x0f\xb6\x86\xea\x7a\x17\xb6\x6b\xa8\x69\x29\x77\xf0\xe9\xc2\x56\x43\x8a\x5e\xb3\x03\xcd\x96\xe7\x74\x3b\x4a\x8c\x56\xb7\xe3\xb9\xcd\x96\x57\x02\xaf\xeb\x7a\x0b\xd0\x4f\x4e\xcf\x2e\x41\xd3\x75\x7a\x4a\x21\xe7\x6e\xf7\xb2\x64\x28\x75\x76\xcf\xd5\x14\xa7\xa3\xe0\x3a\x76\x8a\x45\xa9\x1a\x72\x16\xe9\xba\xfa\xf9\xba\x67\x2f\x10\xc2\x99\xdd\x6c\x3b\x9d\x0f\x3d\x05\xac\x44\x9c\x4f\xae\x18\xe5\xf2\xa9\x51\xd7\x29\xf0\x36\x0a\xa9\x68\x14\x24\xb6\xc3\xe3\xe3\xe3\x34\x9f\x99\xdb\x4d\x12\x2a\xb9\x35\xcc\x01\xa3\xb2\x3c\x40\x11\x09\xa7\x35\xf8\xe9\x02\x87\x63\x2c\x89\x8f\xa0\x83\x13\xfc\x53\x09\x16\x03\x25\x68\x72\x82\xc2\x12\x08\x44\x45\x59\x60\x4e\x06\x27\xd0\x67\xb7\x65\x41\xfe\x52\x85\x12\xfa\x8c\x07\x98\x97\xfb\xec\xf6\x04\x34\x52\x41\xfe\xc2\x35\x38\xfc\x39\xbe\x3d\x81\x08\xf1\x21\xa1\x35\xa8\x9e\xa8\xdc\x3a\xc2\x28\x78\x4d\xfa\x11\x96\x08\x54\xaf\xdc\x30\xc7\x04\x4f\x54\x14\x99\x2a\x7a\x25\xa6\xb2\x61\x4e\x48\x20\x47\x8d\x00\x8f\x89\x8f\xcb\xfa\xe1\xf5\x94\x05\xd6\x9c\x5d\x65\xcc\x32\xfe\x33\x21\xe3\x86\xd9\x4a\x59\x2d\x7b\xd3\x18\xaf\x30\xae\xfa\x04\x4b\x19\xf7\x44\x57\x02\x81\x65\xe3\xda\x3b\x2f\xff\xfa\xca\xec\xeb\x4d\xc9\xd7\x33\xf7\x43\xbd\x48\xdd\xd2\xcc\x9d\x1a\x46\xdd\x52\x4e\xa9\x3e\xf4\x59\x30\x05\x22\x71\x24\x7c\x16\xe3\x86\x69\xea\x07\x39\x55\x9f\xb3\x88\x12\xfe\x08\x47\x48\x47\x94\xad\xaa\xfb\xe5\xbc\xcd\x7d\x51\x21\xcb\x13\xdc\xff\x4a\x64\x39\x7d\x11\x31\x26\x47\x1a\x28\xad\x0d\x04\x09\x1c\x2c\x27\x29\xdf\xd0\xd0\x65\x14\x7c\x49\x84\xac\x01\x65\x14\x9f\xc0\x08\xab\xca\x54\x83\xc3\x6a\xf5\xff\x4e\x20\x24\x14\x97\x17\x43\x95\x77\x38\x3a\x01\x1d\x01\xe9\x04\xf8\x81\x44\x2a\x58\x10\x95\x27\xd0\x47\xfe\xd7\x21\x67\x09\x0d\xca\x3e\x0b\x19\xaf\xc1\x8f\x83\x77\xea\x77\x55\xfd\x10\xa3\x20\xd0\x5c\x29\x6f\xe8\x0f\xf5\xcc\x86\x99\xcd\x34\x95\xbe\x25\xea\xbf\xb4\x7b\xac\x88\xb4\xa5\x1c\x85\xbc\x03\xd4\x25\x7f\xc5\x3c\x06\xa0\x38\x78\xe1\x4c\x3a\xc6\x5c\x21\x09\xcb\x28\x24\x43\x5a\x03\xc9\xe2\xbc\xa2\xc6\xfa\x45\xc3\x94\x2c\x36\x4f\xeb\x96\x0c\x96\x8c\xa6\x99\xd5\x7c\x57\xad\xbe\x70\xa8\x14\x32\x9d\x6d\x9a\xd4\xa0\x1f\x32\xff\x6b\xce\xb7\x23\x74\x5b\xce\x9c\xe4\x5d\xb5\x1a\xdf\xe6\x5e\xfa\x21\x46\x5c\x11\x94\xa3\xdc\xf8\xa6\x40\x59\x28\x07\x50\x22\xd9\xbd\x90\xc8\x69\x4b\x2b\x0a\xa0\x1e\x90\xf1\x4b\xbb\x55\x5e\xde\xfb\xca\x79\x58\x88\x39\xdf\xca\xc8\x3a\x98\x33\x3b\x2b\x4d\x98\xe0\xe3\x30\xcc\x66\x37\xcc\x6a\xfa\x2c\x62\xe4\xcf\x9f\x5f\x54\xd0\xec\x25\x47\x01\x49\x44\x0d\xde\xea\xb1\x82\x04\x30\x18\xe4\xb2\x58\x0a\x56\x83\xc3\xf8\x16\x04\x0b\x49\x00\x3f\xe2\x63\xf5\x9b\x4f\x0c\x83\xc1\x8a\x2e\x76\x21\x3b\x2c\x39\x79\xb9\x2c\xf1\x6e\x63\xc0\xe5\xb4\xab\x41\x26\x59\xa9\xf9\xa5\x5a\x3d\x01\x5d\xa2\xb2\xf9\x3e\xa6\x12\xf3\x22\x7b\xe9\xff\xaa\xda\x28\xeb\x76\xb3\xdf\xfd\x72\x74\xd4\x2a\x2e\x40\x47\xca\xaf\x4d\xc8\xe2\x2d\x25\xb0\x6a\xbd\x14\xb6\x38\x22\xe7\x3f\xcb\xbb\x0d\x8b\x4b\x0d\xa0\x37\x4c\x0a\x37\x7a\x0e\xe0\x10\x66\x33\xb1\xd8\xf0\x80\x01\xe3\xb0\x3c\x7f\xdf\x70\xff\x01\x66\xb3\x7b\x54\x61\xf5\x34\xbe\x91\x3b\x8b\x5f\x9b\x96\x6d\xad\xe4\x8c\xbf\xc8\xc1\x8b\x67\xbe\x77\xd3\x6d\x8a\xd9\xd2\x79\x0e\x53\xe7\x79\xc8\x37\x76\x3e\xf7\x6d\x54\xfb\x6e\x39\xc1\xae\xbb\x42\x15\xaa\xf3\x5c\xf2\x90\x3b\x64\x62\x20\x18\x71\x3c\x68\x98\xdb\xec\xb2\xbe\xb0\x3f\xcc\x93\xe6\xf9\xf9\x79\x96\x7c\x03\xec\x33\xae\xf7\xe4\xe6\xcb\x83\xdc\x82\xe0\x48\x2d\x07\x72\x79\xbb\xcf\xc2\xa0\x38\x71\xfb\x09\x17\x0a\x7b\xcc\x48\x3a\xb0\x68\x28\x08\xd5\x48\xb3\xbe\xe2\x5e\x82\xff\x45\x31\xa6\xf1\xe9\x4d\xd4\x01\xe3\x51\x0d\x7c\x14\x13\x89\x42\xf2\x17\x2e\x4c\xfa\x6f\x7f\xfe\x15\x07\xa8\xa0\x5e\xaf\xcd\xc8\x86\xb5\x96\x6b\x69\x21\x5f\x0c\x2e\xba\xb7\xf8\x36\x33\xef\xe9\x47\x82\x27\x40\x28\x3c\x7a\xee\x55\xb7\x50\xa1\x0f\xdf\x4b\xbc\xc5\xe9\x37\xfd\x79\xec\x64\xa2\xa0\x28\xec\x43\xf6\x9f\x09\x59\x21\x39\xa3\xc3\xd7\x53\xed\xef\x9b\x6f\x50\xfe\x91\x1d\x4b\xd5\xad\x94\xc9\x6f\xe0\x75\x05\x0d\x43\xf6\x66\x7e\x4d\xf0\xfe\xf9\xd6\xde\x0f\xbf\x0f\x3f\x4c\x5b\xd3\x85\xab\xd5\xfb\xaf\x67\x66\xb0\x8a\x75\xf4\xc8\xfd\xd8\xcd\x97\x58\x5f\x59\x98\xcd\x71\x07\x05\xb5\x60\x79\xc2\x9d\x56\x82\x57\xf7\x8c\x15\x8e\x76\xc5\x3d\x1e\xd5\xe8\xa3\x97\x9e\xff\x4b\x9d\x65\xb5\xc3\xbc\x7f\x0b\xfb\x95\x1a\xca\x79\xbb\xb5\xd6\x53\x26\x34\xc0\x5c\x75\x7f\x79\x77\x4a\xef\x91\xab\x26\x6a\xf7\x72\xcc\xf3\xaa\xe9\x96\xed\xdd\xea\x45\x90\x42\xf3\xee\xbb\xc2\x9d\xa9\xc6\x3b\xe7\x99\x00\xf5\xd1\x0e\xf2\xb4\x73\x7a\x7a\x4a\x04\x3f\xd4\x11\xef\x03\xeb\x7f\xb3\xcd\x5d\x5d\x6e\x2d\x2e\xd4\x2d\x17\x5c\xf3\xa1\x57\x58\x72\xad\x5e\xef\xdb\x7b\xe3\xf7\xe1\x8d\xfb\x45\xd7\x7e\xd1\xb5\x5f\x74\xed\xba\xb3\xec\x17\x5d\x3b\xd3\xb2\x6d\x32\x54\xdd\xd2\xe7\x71\xa7\x4f\x38\x0a\x5d\x80\x2c\x47\x5e\xfc\x26\x46\xee\x6a\xd2\xca\x4d\x93\xa5\xa1\x8f\x8f\x8f\x1f\x3a\xe0\xce\x9f\xec\xae\x1f\x49\xee\x46\xd3\xb0\x4b\xed\xcb\x4b\xb6\x2e\x47\x1b\x5b\x97\xc2\x43\xb4\xc7\x4c\xbe\xd2\xdb\xdc\xbb\xd7\x90\xbf\x85\xb5\x9a\xae\xf2\x7f\x27\xe2\xe5\x1c\xe2\x68\x35\x5b\x69\x89\xb6\x4e\x55\x98\x4a\xe8\x4f\xb7\x3b\x87\x5b\xcf\x1d\x6b\xf7\x1d\xee\x67\x86\xba\x15\x90\xf1\x69\xfa\x7f\x23\x9f\x26\x76\xad\xad\xdd\x70\xbd\x2e\x15\x71\x99\xbf\xea\x56\x9f\x05\x53\x35\x32\x92\x51\x78\x6a\x18\xc5\xdf\xcc\x8b\x13\x31\x62\x63\xcc\xbf\xc1\xdf\x61\x58\x43\xf5\xcf\x7f\xd3\xf3\xdb\x7c\x57\x6b\xfb\xaf\x6a\x7d\xbb\x6f\x6a\xad\xd0\xdc\x42\x93\xcb\x3f\xa6\xf0\x84\xef\x69\xfd\x3b\x00\x00\xff\xff\xfb\x35\x4a\xe0\x65\x46\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 18021, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
