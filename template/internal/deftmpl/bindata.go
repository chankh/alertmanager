// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x7d\x6f\xdb\xb6\x9b\xff\xeb\x53\x3c\xd3\x70\x58\x03\xd8\x96\xd3\x6e\xc5\xe2\xd8\x39\xb8\x8e\xd2\x08\xe7\xc8\x81\xac\xb4\x2b\x86\x21\xa0\x25\xda\x66\x2b\x91\x1a\x49\xd9\xf1\x32\x7f\xf7\x03\x29\xf9\x45\xb1\x9c\x38\xb9\x2e\xf1\xfd\x96\x04\x6d\x25\x8a\xcf\xfb\x2b\x45\xaa\xb7\xb7\x10\xe2\x21\xa1\x18\xcc\xeb\x6b\x14\x61\x2e\x63\x44\xd1\x08\x73\x13\xe6\xf3\xb6\xba\xbf\xc8\xee\x6f\x6f\x01\xd3\x10\xe6\x73\x63\x2b\xc8\x95\xd7\x55\x50\xb7\xb7\x50\xb3\x6f\x24\xe6\x14\x45\x57\x5e\x17\xe6\x73\xeb\x47\x4b\xcf\x13\xff\xcd\x71\x80\xc9\x04\xf3\x96\x9a\xe4\xe5\x37\x19\x4c\x8e\xbd\x88\x5e\xa4\x83\xaf\x38\x90\x0a\xed\xef\x0a\xa4\x2f\x91\x4c\x05\xfc\x0d\x92\x5d\x25\xc9\x02\x94\x0c\x01\xff\xb9\x7c\x68\x0e\x09\x27\x74\xa4\x60\x1a\x0a\x46\x4b\x21\x6a\x67\x7a\x14\xfe\x86\x08\xd3\x75\x8a\x7f\x80\x9a\xf4\x91\xb3\x34\xe9\xa2\x01\x8e\x44\xad\xcf\xb8\xc4\xe1\x25\x22\x5c\xd4\x3e\xa1\x28\xc5\x8a\xe0\x57\x46\x28\x98\xa0\xb0\x42\x46\x72\x24\xe1\x8d\xc2\x55\xeb\xb0\x38\x66\x34\x03\x3e\xc8\xc7\xd6\xf0\x1d\xc0\x7c\xfe\xe6\xf6\x16\xa6\x44\x8e\x8b\x93\x6b\x1e\x8e\xd9\x04\x17\xa9\xbb\x28\xc6\x22\x57\x63\x19\xf5\x25\xe3\x07\xcb\xab\x2d\xb6\x09\xb1\x08\x38\x49\x24\x61\xd4\xbc\x47\xc7\x12\xdf\xc8\xcc\x8e\xd7\x11\x11\x32\x9f\xca\x11\x1d\x61\xa8\xc1\x7c\x9e\xf1\xd5\x30\x56\x83\x9b\x7a\x52\x5a\xa9\x6a\x45\x2a\xf6\xd5\x5d\x0b\x96\x02\xe4\x8c\x65\xc4\xdb\x94\x32\x89\x14\x4f\x05\x94\x6b\xc3\x4f\xc3\xdb\x67\x29\x0f\x70\x23\x33\x26\xa6\x98\x23\xc9\x78\xe6\x7e\x46\x89\xa2\x0a\x3a\x10\x11\x0a\xbe\xd5\x42\x3c\x44\x69\x24\x6b\x92\xc8\x08\xe7\x5a\x90\x38\x4e\x22\x24\x8b\xbe\x58\xdb\xa6\xf2\x22\x9e\x54\xa8\x10\x88\xcb\x50\x15\x03\x6d\x47\x7c\x43\x14\x45\x03\x14\x7c\xdb\xc0\x57\xca\xbe\x42\x0a\x7f\xc3\x43\x13\x23\x42\xbf\xed\xcc\x41\xc2\xb1\x72\x16\x73\xb7\xd9\x6b\xf8\xef\x55\x80\x4e\x1b\x3b\x72\x40\x02\x46\x71\xcc\xbe\x92\x1d\x79\x50\xf3\x53\x1e\xed\xca\xf1\xee\xc2\x0d\x19\x93\x59\x92\xdc\xe2\x53\x63\x92\x04\x63\x24\x57\x00\x9c\xc5\x4f\xf7\x84\xbb\xd8\x62\x2c\x04\x1a\x3d\xc2\x4b\x0b\xbc\x25\x8a\x5a\x98\xca\xd9\x12\xdf\x66\xaa\x78\x9c\xe7\x6f\x62\x0c\x22\x82\xa9\x7c\xba\xc4\xdb\x30\xae\x8a\xcc\xd3\xfc\x69\x13\x2f\xa1\x42\x22\x1a\x60\x51\x82\x77\x23\x37\xde\xa3\x55\x96\x88\x11\xa6\x04\x3f\xdd\x48\xf7\x21\xdb\xb4\x50\x5e\x4a\xb6\x64\xce\xd2\xda\x61\xdc\xa9\x5c\x85\xd2\x78\x00\x75\xa8\xce\xe7\x46\x36\x08\xd9\xa0\xce\xd1\xf7\x6b\xa4\x58\x5f\x35\x91\xea\x9a\x44\x25\xf4\x3c\x2c\x58\x34\xc1\xe1\x1d\x8a\x8b\xe1\xdd\x69\x2e\x20\x36\xa8\x56\x77\x51\xa9\xd0\x25\xe3\xf1\xde\x54\xb0\xfa\x14\x3f\x25\x30\x8d\x57\xfb\xdd\x63\xbf\xf6\xba\xfe\x79\xb4\x81\xaf\xd4\x3e\xeb\x08\x8a\x26\x9a\x90\x40\x32\xce\x12\xb1\xb2\xbc\x44\x12\x5f\x17\x6d\xf5\x6a\x8e\xc7\x85\xd3\xa6\x56\x31\x95\x44\xce\xae\x43\x22\x92\x08\xcd\xae\xb7\xf4\x3e\x0f\xe7\xbe\x4d\xcc\x31\xa3\x44\x32\xa5\x90\x6b\xc9\x58\xf4\xc8\xaa\x52\x70\x86\x18\x21\x42\xbe\x4b\x8a\x2e\x62\x7a\xcd\xcf\xff\x57\x87\x2a\xea\xf3\xc9\xc9\x79\x0d\x23\x8e\x11\x89\x56\x18\x57\x6b\xc9\x47\xdb\xba\x88\x69\x2c\x63\xed\x83\x46\xf3\x87\xd3\x5e\xc7\xff\x72\x69\x83\x1a\x82\xcb\xab\x0f\x5d\xa7\x03\x66\xd5\xb2\x3e\xbf\xeb\x58\xd6\xa9\x7f\x0a\xbf\x9d\xfb\x17\x5d\x38\xac\xd5\xc1\xe7\x88\x0a\xa2\x1c\x01\x45\x96\x65\xbb\x26\x98\x63\x29\x93\x86\x65\x4d\xa7\xd3\xda\xf4\x5d\x8d\xf1\x91\xe5\x7b\xd6\x8d\xc2\x75\xa8\x80\xf3\xcb\xaa\x5c\x83\xac\x85\x32\x34\x4f\x8c\xe6\x0f\xd5\xaa\xd1\x97\xb3\x08\x03\xa2\x21\x68\x22\x21\xe6\x44\x29\x5b\xb5\x9a\xa0\x50\x8b\x86\x65\x8d\x88\x1c\xa7\x83\x5a\xc0\x62\x4b\xc9\x30\x4a\xa9\xa5\xd1\xa1\x20\xc3\x57\xd5\xa2\x55\x17\xea\x10\x86\x61\xf8\x63\x0c\x17\x8e\x0f\x5d\x12\x60\x2a\x30\xbc\xb9\x70\xfc\x03\xc3\xe8\xb0\x64\xc6\xc9\x68\x2c\xe1\x4d\x70\x00\x6f\xeb\x87\x3f\xc3\x45\x86\xd1\x30\x2e\x31\x8f\x89\x10\x84\x51\x20\x02\xc6\x98\xe3\xc1\x0c\x46\x1c\x51\x89\xc3\x0a\x0c\x39\xc6\xc0\x86\x10\x8c\x11\x1f\xe1\x0a\x48\x06\x88\xce\x20\xc1\x5c\x30\x0a\x6c\x20\x11\xa1\xca\x37\x11\x04\x2c\x99\x19\x6c\x08\x72\x4c\x04\x08\x36\x94\x53\xc4\x33\x09\x91\x10\x2c\x20\x48\xe2\x10\x42\x16\xa4\x31\xa6\x59\x50\xc1\x90\x44\x58\xc0\x1b\x39\xc6\x60\xf6\x73\x08\xf3\x40\x13\x09\x31\x8a\x0c\x42\x41\x3d\x5b\x3c\xd2\xcb\x70\x96\x4a\xe0\x58\x48\x4e\xb4\x16\x2a\x40\x68\x10\xa5\xa1\xe2\x61\xf1\x38\x22\x31\xc9\x29\x28\x70\x2d\xb8\x30\x24\x83\x54\xe0\x8a\xe6\xb3\x02\x31\x0b\xc9\x50\xfd\x8b\xb5\x58\x49\x3a\x88\x88\x18\x57\x20\x24\x0a\xf5\x20\x95\xb8\x02\x42\x0d\x6a\x3d\x56\x94\x1c\x16\xe3\x20\x70\x14\x19\x01\x4b\x08\x16\xa0\x65\x5d\x71\xa7\xe7\x28\xd6\x13\xa5\x50\x99\xab\x48\xa8\x91\xe9\x98\xc5\x45\x49\x88\x30\x86\x29\xa7\x44\x8c\xb1\x86\x09\x19\x08\xa6\x29\x2a\x6f\x56\x23\x6a\xfa\x90\x45\x11\x9b\x2a\xd1\x02\x46\x43\x92\xaf\xbc\xb5\x91\xd1\x80\x4d\xb0\x96\x25\xb3\x2b\x65\x92\x04\x99\xba\xb5\x01\x92\x95\x55\xf3\x47\x62\x8c\xa2\x08\x06\x38\x57\x18\x0e\x81\x50\x40\x6b\xe2\x70\x45\x5e\xf5\xd3\x92\xa0\x08\x12\xc6\x35\xbd\xbb\x62\xd6\x0c\xc3\x3f\xb7\xa1\xdf\x3b\xf3\x3f\xb7\x3d\x1b\x9c\x3e\x5c\x7a\xbd\x4f\xce\xa9\x7d\x0a\x66\xbb\x0f\x4e\xdf\xac\xc0\x67\xc7\x3f\xef\x5d\xf9\xf0\xb9\xed\x79\x6d\xd7\xff\x02\xbd\x33\x68\xbb\x5f\xe0\x7f\x1c\xf7\xb4\x02\xf6\x6f\x97\x9e\xdd\xef\x43\xcf\x33\x9c\x8b\xcb\xae\x63\x9f\x56\xc0\x71\x3b\xdd\xab\x53\xc7\xfd\x08\x1f\xae\x7c\x70\x7b\x3e\x74\x9d\x0b\xc7\xb7\x4f\xc1\xef\x81\x22\x98\xa3\x72\xec\xbe\x42\x76\x61\x7b\x9d\xf3\xb6\xeb\xb7\x3f\x38\x5d\xc7\xff\x52\x31\xce\x1c\xdf\x55\x38\xcf\x7a\x1e\xb4\xe1\xb2\xed\xf9\x4e\xe7\xaa\xdb\xf6\xe0\xf2\xca\xbb\xec\xf5\x6d\x68\xbb\xa7\xe0\xf6\x5c\xc7\x3d\xf3\x1c\xf7\xa3\x7d\x61\xbb\x7e\x0d\x1c\x17\xdc\x1e\xd8\x9f\x6c\xd7\x87\xfe\x79\xbb\xdb\x55\xa4\x8c\xf6\x95\x7f\xde\xf3\x14\x7f\xd0\xe9\x5d\x7e\xf1\x9c\x8f\xe7\x3e\x9c\xf7\xba\xa7\xb6\xd7\x87\x0f\x36\x74\x9d\xf6\x87\xae\x9d\x91\x72\xbf\x40\xa7\xdb\x76\x2e\x2a\x70\xda\xbe\x68\x7f\xb4\x35\x54\xcf\x3f\xb7\x3d\x43\x4d\xcb\xb8\x83\xcf\xe7\xb6\x1a\x52\xf4\xda\x2e\xb4\x3b\xbe\xd3\x73\x95\x18\x9d\x9e\xeb\x7b\xed\x8e\x5f\x01\xbf\xe7\xf9\x4b\xd0\xcf\x4e\xdf\xae\x40\xdb\x73\xfa\x4a\x21\x67\x5e\xef\xa2\x62\x28\x75\xf6\xce\xd4\x14\xc7\x55\x70\xae\x9d\x61\x51\xaa\x86\x82\x45\x7a\x9e\xbe\xbf\xea\xdb\x4b\x84\x70\x6a\xb7\xbb\x8e\xfb\xb1\xaf\x80\x95\x88\x8b\xc9\x35\xa3\x5a\x3d\x31\x9a\x3a\x05\xde\xc4\x11\x15\xad\x92\xc4\x76\x78\x74\x74\x94\xe5\x33\x73\xb7\x49\x42\x25\xb7\x96\x39\x64\x54\x56\x87\x28\x26\xd1\xac\x01\x3f\x9d\xe3\x68\x82\x25\x09\x10\xb8\x38\xc5\x3f\x55\x60\x39\x50\x81\x36\x27\x28\xaa\x80\x40\x54\x54\x05\xe6\x64\x78\x0c\x03\x76\x53\x15\xe4\x2f\x55\x27\x61\xc0\x78\x88\x79\x75\xc0\x6e\x8e\x41\x23\x15\xe4\x2f\xdc\x80\xc3\x9f\x93\x9b\x63\x88\x11\x1f\x11\xda\x80\xfa\xb1\xca\xad\x63\x8c\xc2\x97\xa4\x1f\x63\x89\x40\xb5\x4f\x2d\x73\x42\xf0\x54\x45\x91\xa9\xa2\x57\x62\x2a\x5b\xe6\x94\x84\x72\xdc\x0a\xf1\x84\x04\xb8\xaa\x6f\x5e\x4e\x59\x60\x2d\xd8\x55\xc6\xac\xe2\x3f\x53\x32\x69\x99\x9d\x8c\xd5\xaa\x3f\x4b\xf0\x1a\xe3\xaa\x4d\xb0\x94\x71\x8f\x75\x25\x10\x58\xb6\xae\xfc\xb3\xea\xaf\x2f\xcc\xbe\x7e\x4f\xf5\x72\xe6\xbe\xaf\x17\x69\x5a\x9a\xb9\x13\xc3\x68\x5a\xca\x29\xd5\xc5\x80\x85\x33\x20\x12\xc7\x22\x60\x09\x6e\x99\xa6\xbe\x91\x33\x75\x9d\x47\x94\x08\xc6\x38\x46\x3a\xa2\x6c\x55\xdd\x2f\x16\x5d\xee\xb3\x0a\x59\x9d\xe2\xc1\x37\x22\xab\xd9\x83\x98\x31\x39\xd6\x40\x59\x6d\x20\x48\xe0\x70\x35\x49\xf9\x86\x86\xae\xa2\xf0\x6b\x2a\x64\x03\x28\xa3\xf8\x18\xc6\x58\x55\xa6\x06\x1c\xd6\xeb\xff\x75\x0c\x11\xa1\xb8\xba\x1c\xaa\xbd\xc7\xf1\x31\xe8\x08\xc8\x26\xc0\x0f\x24\x56\xc1\x82\xa8\x3c\x86\x01\x0a\xbe\x8d\x38\x4b\x69\x58\x0d\x58\xc4\x78\x03\x7e\x1c\xbe\x57\xbf\xeb\xea\x87\x04\x85\xa1\xe6\x4a\x79\xc3\x60\xa4\x67\xb6\xcc\x7c\xa6\xa9\xf4\x2d\xd1\xe0\xb9\xdd\x63\x4d\xa4\x1d\xe5\x28\xe5\x1d\xa0\x29\xf9\x0b\xe6\x31\x00\xc5\xc1\x33\x67\xd2\x09\xe6\x0a\x49\x54\x45\x11\x19\xd1\x06\x48\x96\x14\x15\x35\xd1\x0f\x5a\xa6\x64\x89\x79\xd2\xb4\x64\xb8\x62\x34\xcb\xac\xe6\xfb\x7a\xfd\x99\x43\xa5\x94\xe9\x7c\x1d\xdd\x80\x41\xc4\x82\x6f\x05\xdf\x8e\xd1\x4d\x35\x77\x92\xf7\xf5\x7a\x72\x53\x78\x18\x44\x18\x71\x45\x50\x8e\x0b\xe3\xdb\x02\x65\xa9\x1c\x40\xa9\x64\x77\x42\xa2\xa0\x2d\xad\x28\x80\x66\x48\x26\xcf\xed\x56\x45\x79\xef\x2a\xe7\x7e\x21\x16\x7c\x2b\x23\xeb\x60\xce\xed\xac\x34\x61\x42\x80\xa3\x28\x9f\xdd\x32\xeb\xd9\xbd\x48\x50\xb0\xb8\x7f\x56\x41\xf3\x87\x1c\x85\x24\x15\x0d\x78\xa7\xc7\x4a\x12\xc0\x70\x58\xc8\x62\x19\x58\x03\x0e\x93\x1b\x10\x2c\x22\x21\xfc\x88\x8f\xd4\x6f\x31\x31\x0c\x87\x6b\xba\xd8\x87\xec\xb0\xe2\xe4\xf9\xb2\xc4\xfb\xad\x01\x57\xd0\xae\x06\x99\xe6\xa5\xe6\x97\x7a\xfd\x18\x74\x89\xca\xe7\x07\x98\x4a\xcc\xcb\xec\xa5\xff\xd4\xb5\x51\x36\xed\x66\xbf\xff\xe5\xed\xdb\x4e\x79\x01\x7a\xab\xfc\xda\x84\x3c\xde\x32\x02\xeb\xd6\xcb\x60\xcb\x23\x72\xf1\xb3\xda\xee\x5e\xee\x73\x83\x7e\x5f\x52\xfa\x9e\xe7\x00\x0e\x61\x3e\x17\xcb\x17\x1e\x30\x64\x1c\x56\x5b\xb2\x5b\xb6\xc4\x61\x3e\xbf\x43\x15\xd6\x37\x68\x5b\x85\xed\xd9\x8d\x69\xf9\xab\x95\x82\xf1\x97\x39\x78\x79\xcf\x5f\xdd\x74\x97\x62\xb6\x72\x9e\xc3\xcc\x79\xee\xf3\x8d\xbd\xcf\x7d\x5b\xd5\xbe\x5f\x4e\xb0\xef\xae\x50\x87\xfa\x22\x97\xdc\xe7\x0e\xb9\x18\x08\xc6\x1c\x0f\x5b\xe6\x2e\x2f\x59\x9f\xd9\x1f\x16\x49\xf3\xec\xec\x2c\x4f\xbe\x21\x0e\x18\xd7\xef\xe4\x16\xcb\x83\xc2\x82\xe0\xad\x5a\x0e\x14\xf2\xf6\x80\x45\x61\x79\xe2\x0e\x52\x2e\x14\xf6\x84\x91\x6c\x60\xd9\x50\x10\xaa\x91\xe6\x7d\xc5\x9d\x04\xff\x8b\x62\x4c\xe3\xd3\x2f\x51\x87\x8c\xc7\x0d\x08\x50\x42\x24\x8a\xc8\x5f\xb8\x34\xe9\xbf\xfb\xf9\x57\x1c\xa2\x92\x7a\xbd\x31\x23\x1f\xd6\x5a\x6e\x64\x85\x7c\x39\xb8\xec\xde\x92\x9b\xdc\xbc\x27\x9f\x08\x9e\x02\xa1\xf0\xe0\x56\x48\xd3\x42\xa5\x3e\x7c\x27\xf1\x96\xa7\xdf\xec\xe7\xa1\x8d\x89\x92\xa2\xf0\x1a\xb2\xff\x4c\xc8\x0a\xc9\x19\x1d\xbd\x9c\x6a\x7f\xdf\x7e\xa8\xee\x8f\x7c\x57\xaa\x69\x65\x4c\x7e\x07\xaf\x2b\x69\x18\xf2\x27\x8b\x93\x63\x77\xb7\xb7\x5e\xfd\xf0\xdf\xe1\x87\x59\x6b\xba\x74\xb5\xe6\xe0\xe5\xcc\x0c\x56\xb9\x8e\x1e\x38\x32\xb9\xfd\x5c\xe3\x0b\x0b\xb3\x3d\xee\xa0\xa4\x16\xac\x36\xb8\xb3\x4a\xf0\xe2\x9e\xb1\xc6\xd1\xbe\xb8\xc7\x83\x1a\x7d\xf0\x1c\xec\xff\x53\x67\x59\xef\x30\xef\x1e\xcc\x7d\xa1\x86\x72\xd1\x6e\x6d\xf4\x94\x29\x0d\x31\x57\xdd\x5f\xd1\x9d\xb2\xa3\xc5\xaa\x89\xda\xbf\x1c\xf3\xb4\x6a\xba\x63\x7b\xb7\x7e\x0e\xa4\xd4\xbc\xaf\x5d\xe1\xde\x54\xe3\xbd\xf3\x4c\x80\xe6\x78\x0f\x79\xda\x3b\x3d\x3d\x26\x82\xef\xeb\x88\x5f\x03\xeb\x3f\xb3\xcd\x5d\x5f\x6e\x2d\xcf\xd3\xad\x16\x5c\x8b\xa1\x17\x58\x72\xad\x9f\xee\x7b\xf5\xc6\x7f\x87\x37\xbe\x2e\xba\x5e\x17\x5d\xaf\x8b\xae\x7d\x77\x96\xd7\x45\xd7\xde\xb4\x6c\xdb\x0c\xd5\xb4\xf4\x7e\xdc\xc9\x23\xb6\x42\x97\x20\xab\x91\x67\x3f\x89\x51\x38\x9a\xb4\x76\xd2\x64\x65\xe8\xa3\xa3\xa3\xfb\x36\xb8\x8b\x3b\xbb\x9b\x5b\x92\xfb\xd1\x34\xec\x53\xfb\xf2\x9c\xad\xcb\xdb\xad\xad\x4b\xe9\x26\xda\x43\x26\x5f\xeb\x6d\xee\x9c\x6b\x28\x9e\xc2\x5a\x4f\x57\xc5\xff\x3a\xe0\xf9\x1c\xe2\xed\x7a\xb6\xd2\x12\xed\x9c\xaa\x30\x95\x30\x98\xed\xb6\x0f\xb7\x99\x3b\x36\xce\x3b\xdc\xcd\x0c\x4d\x2b\x24\x93\x93\xec\x6f\xa3\x98\x26\xf6\xad\xad\xdd\x72\xbc\x2e\x13\x71\x95\xbf\x9a\xd6\x80\x85\x33\x35\x32\x96\x71\x74\x62\x18\xe5\xdf\xef\x24\xa9\x18\xb3\x09\xe6\xdf\xe1\xd3\xfc\x0d\x54\xff\xfc\xc7\x7f\xdf\xe7\x53\xad\xdd\xbf\xd4\xfa\x7e\x1f\x6a\xad\xd1\xdc\x41\x93\xab\xef\xeb\x1f\xf1\x99\xd6\xff\x06\x00\x00\xff\xff\xca\x1b\x48\xc8\x78\x44\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17528, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

